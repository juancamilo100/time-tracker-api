swagger: '2.0'
info:
  version: 1.0.0
  title: Portfolio API
  description: API for the Portfolio App
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
host: 'localhost:3000'
basePath: /api
tags:
  - name: Users
    description: API for users in the system
  - name: Portfolios
    description: API for users' portfolios
  - name: Auth
    description: API for user access management
schemes:
  - http
securityDefinitions:
  basicAuth:
    type: basic
consumes:
  - application/json
produces:
  - application/json
paths:
  /auth/login:
    post:
      tags:
        - Auth
      description: Login User
      parameters:
        - name: user
          in: body
          description: User to login
          schema:
            $ref: '#/definitions/UserLoginRequest'
      produces:
        - application/json
      responses:
        '200':
          description: New portfolio is created
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Incomplete request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Something went wrong
  /auth/register:
    post:
      tags:
        - Auth
      description: Create new user in system
      parameters:
        - name: user
          in: body
          description: User that we want to create
          schema:
            $ref: '#/definitions/UserCreate'
      produces:
        - application/json
      responses:
        '200':
          description: New user is created
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Incomplete request
        '409':
          description: User already exists
        '500':
          description: Something went wrong
  /users:
    parameters:
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Users
      summary: Get all users in system
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UsersWithNoPasswordResponse'
        '500':
          description: Something went wrong
  '/users/{userId}':
    parameters:
      - name: userId
        in: path
        required: true
        description: ID of user that we want to find
        type: string
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Users
      summary: Get user with given ID
      responses:
        '200':
          description: User is found
          schema:
            $ref: '#/definitions/UserWithNoPasswordResponse'
        '500':
          description: Something went wrong
    delete:
      summary: Delete user with given ID
      tags:
        - Users
      responses:
        '200':
          description: User is deleted
          schema:
            $ref: '#/definitions/UserWithNoPasswordResponse'
        '500':
          description: Something went wrong
  /portfolios:
    parameters:
      - name: Authorization
        in: header
        type: string
        required: true
    post:
      tags:
        - Portfolios
      description: Create new portfolio in system
      parameters:
        - name: portfolio
          in: body
          description: Portfolio that we want to create
          schema:
            $ref: '#/definitions/PortfolioCreateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: New portfolio is created
          schema:
            $ref: '#/definitions/PortfolioResponse'
        '400':
          description: Incomplete request
        '500':
          description: Something went wrong
    get:
      tags:
        - Portfolios
      summary: Get all portfolios for the current user
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PortfoliosResponse'
        '500':
          description: Something went wrong
  '/portfolios/{portfolioId}':
    parameters:
      - name: portfolioId
        in: path
        required: true
        description: ID of portfolio
        type: string
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Portfolios
      summary: Get portfolio with given ID
      responses:
        '200':
          description: Portfolio is found
          schema:
            $ref: '#/definitions/PortfolioResponse'
        '500':
          description: Something went wrong
    patch:
      tags:
        - Portfolios
      description: Update a portfolio in the system
      parameters:
        - name: portfolio
          in: body
          description: Portfolio fields to update
          schema:
            $ref: '#/definitions/PortfolioUpdateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: portfolio is updated
          schema:
            $ref: '#/definitions/PortfolioUpdateResponse'
        '400':
          description: Incomplete request
        '500':
          description: Something went wrong
    delete:
      summary: Delete portfolio with given ID
      tags:
        - Portfolios
      responses:
        '200':
          description: Portfolio is deleted
          schema:
            $ref: '#/definitions/PortfolioResponse'
        '500':
          description: Something went wrong
definitions:
  UserCreate:
    required:
      - username
      - password
    properties:
      email:
        type: string
        uniqueItems: true
      username:
        type: string
        uniqueItems: true
      password:
        type: string
  UserWithNoPasswordResponse:
    required:
      - username
      - password
    properties:
      email:
        type: string
        uniqueItems: true
      username:
        type: string
        uniqueItems: true
  UsersWithNoPasswordResponse:
    type: array
    items:
      $ref: '#/definitions/UserWithNoPasswordResponse'
  UserLoginRequest:
    required:
      - username
      - password
    properties:
      username:
        type: string
        uniqueItems: true
      password:
        type: string
  TokenResponse:
    properties:
      auth:
        type: boolean
      token:
        type: string
  PortfolioCreateRequest:
    properties:
      funds:
        type: array
        items:
          $ref: '#/definitions/Fund'
      name:
        type: string
    required:
      - funds
  PortfolioUpdateRequest:
    properties:
      updatedFields:
        type: object
        properties:
          funds:
            type: array
            items:
              $ref: '#/definitions/Fund'
          name:
            type: string
  PortfolioUpdateResponse:
    properties:
      _id:
        type: string
  PortfolioResponse:
    type: object
    properties:
      _id:
        type: string
      funds:
        type: array
        items:
          $ref: '#/definitions/Fund'
      name:
        type: string
      user:
        type: string
  PortfoliosResponse:
    type: array
    items:
      $ref: '#/definitions/PortfolioResponse'
  Fund:
    type: object
    properties:
      symbol:
        type: string
      portfolioPercentage:
        type: string
