swagger: '2.0'
info:
  version: 1.0.0
  title: Time Tracker API
  description: API for the Time Tracker App
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
basePath: /api
tags:
  - name: Auth
    description: API for employee access management
  - name: Employees
    description: API for employees in the system
  - name: Customers
    description: API for customers in the system
  - name: Reports
    description: API for reports in the system    
securityDefinitions:
  basicAuth:
    type: basic
consumes:
  - application/json
produces:
  - application/json
paths:
  /auth/login:
    post:
      tags:
        - Auth
      description: Login Employee
      parameters:
        - name: employee
          in: body
          description: Employee to login
          schema:
            $ref: '#/definitions/EmployeeLoginRequest'
      produces:
        - application/json
      responses:
        '200':
          description: New portfolio is created
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Incomplete request
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Something went wrong
  /auth/register:
    post:
      tags:
        - Auth
      description: Create new employee in system
      parameters:
        - name: employee
          in: body
          description: Employee that we want to create
          schema:
            $ref: '#/definitions/EmployeeCreate'
      produces:
        - application/json
      responses:
        '200':
          description: New employee is created
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Incomplete request
        '409':
          description: Employee already exists
        '500':
          description: Something went wrong
  /employees:
    parameters:
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Employees
      summary: Get all employees in system
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmployeesWithNoPasswordResponse'
        '500':
          description: Something went wrong
  /employees/{employeeId}:
    parameters:
      - name: employeeId
        in: path
        required: true
        description: ID of employee that we want to find
        type: string
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Employees
      summary: Get employee with given ID
      responses:
        '200':
          description: Employee is found
          schema:
            $ref: '#/definitions/EmployeeWithNoPasswordResponse'
        '500':
          description: Something went wrong
    patch:
      tags:
        - Employees
      summary: Update employee with given ID
      parameters:
        - name: employee
          in: body
          description: Employee fields that we want to update
          schema:
            $ref: '#/definitions/EmployeeUpdate'      
      responses:
        '200':
          description: Employee has been updated
        '500':
          description: Something went wrong          
    delete:
      summary: Delete employee with given ID
      tags:
        - Employees
      responses:
        '200':
          description: Employee has been deleted
        '500':
          description: Something went wrong
  /employees/{employeeId}/reports:
    parameters:
      - name: employeeId
        in: path
        required: true
        description: ID of employee that we want to find the reports for
        type: string
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Employees
      summary: Get employee reports
      responses:
        '200':
          description: Employee repoerts were found
          schema:
            $ref: '#/definitions/ReportsResponse'
        '500':
          description: Something went wrong
  /employees/{employeeId}/password:
    parameters:
      - name: employeeId
        in: path
        required: true
        description: ID of employee that we want to change the password for
        type: string
      - name: Authorization
        in: header
        type: string
        required: true
    patch:
      tags:
        - Employees
      summary: Update employee password
      responses:
        '200':
          description: Password was updated
          schema:
            $ref: '#/definitions/ReportsResponse'
        '500':
          description: Something went wrong
  /customers:
    parameters:
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Customers
      summary: Get all customers in system
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CustomersResponse'
        '500':
          description: Something went wrong
    post:
      tags:
        - Customers
      summary: Create a new customer in the system  
      parameters:
        - name: customer
          in: body
          description: Employee that we want to create
          schema:
            $ref: '#/definitions/CustomerCreate'
      produces:
        - application/json
      responses:
        '200':
          description: New employee is created
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Incomplete request
        '409':
          description: Employee already exists
        '500':
          description: Something went wrong        
  /customers/{customerId}:
    parameters:
      - name: customerId
        in: path
        required: true
        description: ID of employee that we want to find
        type: string
      - name: Authorization
        in: header
        type: string
        required: true    
    get:
      tags:
        - Customers
      summary: Get customer with given ID
      responses:
        '200':
          description: Customer was found
          schema:
            $ref: '#/definitions/Customer'
        '500':
          description: Something went wrong
    patch:
      tags:
        - Customers
      summary: Update customer with given ID
      parameters:
        - name: customer
          in: body
          description: Customer fields that we want to update
          schema:
            $ref: '#/definitions/CustomerUpdate'      
      responses:
        '200':
          description: Customer has been updated
        '500':
          description: Something went wrong          
    delete:
      summary: Delete customer with given ID
      tags:
        - Customers
      responses:
        '200':
          description: Customer has been deleted
        '500':
          description: Something went wrong

  /customers/{customerId}/invoice:
    parameters:
      - name: customerId
        in: path
        required: true
        description: ID of employee that we want to find
        type: string
      - name: Authorization
        in: header
        type: string
        required: true
    post:
      tags:
        - Customers
      summary: Generate customer invoice PDF and email it to customer's contact
      parameters:
        - name: Invoice Information
          in: body
          description: Invoice date range
          schema: 
            required:
                - invoiceStartDate
                - invoiceEndDate
                - reportIds
            properties:
              invoiceStartDate:
                type: string
              invoiceEndDate:
                type: string
              reportIds:
                type: array
                items:
                  type: number
      produces:
        - application/json
      responses:
        '200':
          description: New report has been created
          schema:
            type: object
            properties:
              invoiceId:
                type: integer
        '400':
          description: Incomplete request
        '500':
          description: Something went wrong        

  /reports:
    parameters:
      - name: Authorization
        in: header
        type: string
        required: true
    get:
      tags:
        - Reports
      summary: Get all reports in system
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReportsResponse'
        '500':
          description: Something went wrong
    post:
      tags:
        - Reports
      summary: Create a report in the system  
      parameters:
        - name: report
          in: body
          description: Report that we want to create
          schema:
            $ref: '#/definitions/ReportCreate'
      produces:
        - application/json
      responses:
        '200':
          description: New report has been created
          schema:
            $ref: '#/definitions/ReportResponse'
        '400':
          description: Incomplete request
        '500':
          description: Something went wrong        
  /reports/{reportId}:
    parameters:
      - name: reportId
        in: path
        required: true
        description: ID of report that we want
        type: string
      - name: Authorization
        in: header
        type: string
        required: true    
    get:
      tags:
        - Reports
      summary: Get report with given ID
      responses:
        '200':
          description: Customer was found
          schema:
            $ref: '#/definitions/ReportResponse'
        '500':
          description: Something went wrong        
    patch:
      tags:
        - Reports
      summary: Update report with given ID
      parameters:
        - name: report
          in: body
          description: Report fields that we want to update
          schema:
            $ref: '#/definitions/ReportUpdate'      
      responses:
        '200':
          description: Report has been updated
        '500':
          description: Something went wrong          
    delete:
      summary: Delete report with given ID
      tags:
        - Reports
      responses:
        '200':
          description: Report has been deleted
        '500':
          description: Something went wrong
  /reports/{reportId}/submit:
    parameters:
      - name: reportId
        in: path
        required: true
        description: ID of report that we want to submit
        type: string
      - name: Authorization
        in: header
        type: string
        required: true    
    post:
      tags:
        - Reports
      summary: Submit the given report
      responses:
        '200':
          description: Report was submitted
        '400':
          description: Bad request
        '500':
          description: Something went wrong                
  /reports/{reportId}/tasks:
    parameters:
      - name: reportId
        in: path
        required: true
        description: ID of report that we want to add the task to
        type: string
      - name: Authorization
        in: header
        type: string
        required: true    
    post:
      tags:
        - Reports
      summary: Create a task for the given report
      parameters:
        - name: report
          in: body
          description: Task that we want to create
          schema:
            $ref: '#/definitions/TaskCreate'
      produces:
        - application/json
      responses:
        '200':
          description: New task has been created
        '400':
          description: Bad request
        '500':
          description: Something went wrong  
  /reports/{reportId}/tasks/{taskId}:
    parameters:
      - name: reportId
        in: path
        required: true
        description: ID of report that we want to operate on
        type: string
      - name: taskId
        in: path
        required: true
        description: ID of task that we want to operate on
        type: string        
      - name: Authorization
        in: header
        type: string
        required: true    
    patch:
      tags:
        - Reports
      summary: Update task with given ID inside report with given ID
      parameters:
        - name: task
          in: body
          description: Task fields that we want to update
          schema:
            $ref: '#/definitions/TaskUpdate'      
      responses:
        '200':
          description: Task has been updated
        '500':
          description: Something went wrong          
    delete:
      summary: Delete task with given ID
      tags:
        - Reports
      responses:
        '200':
          description: Task has been deleted
        '500':
          description: Something went wrong                           
definitions:
  EmployeeCreate:
    required:
      - email
      - password
      - firstName
      - lastName
      - jobTitle
      - customerId
      - employeeRate
      - customerRate
      - role
    properties:
      firstName: 
        type: string
      lastName: 
        type: string
      jobTitle: 
        type: string
      email: 
        type: string
      password:
        type: string
      customerId: 
        type: integer
      employeeRate: 
        type: integer
      customerRate:
        type: integer        
      role: 
        type: string    
  EmployeeUpdate:
    properties:
      firstName: 
        type: string
      lastName: 
        type: string
      jobTitle: 
        type: string        
      email: 
        type: string
      customerId: 
        type: integer
      employeeRate: 
        type: integer
      customerRate: 
        type: integer  
      role: 
        type: string      
  EmployeeWithNoPasswordResponse:
    properties:
      id: 
        type: integer
      firstName: 
        type: string
      lastName: 
        type: string
      jobTitle: 
        type: string          
      email: 
        type: string
      customerId: 
        type: integer
      employeeRate: 
        type: integer
      customerRate: 
        type: integer  
      role: 
        type: string
  EmployeesWithNoPasswordResponse:
    type: array
    items:
      $ref: '#/definitions/EmployeeWithNoPasswordResponse'
  EmployeeLoginRequest:
    required:
      - email
      - password
    properties:
      email:
        type: string
        uniqueItems: true
      password:
        type: string
  EmployeePasswordChangeRequest:
    required:
      - email
      - password
    properties:
      oldPassword: 
        type: string
      newPassword: 
        type: string
  TokenResponse:
    properties:
      auth:
        type: boolean
      token:
        type: string
  ReportCreate:
    required:
      - customerId
      - employeeId  
      - tasks
    properties:
      customerId:
        type: integer
      employeeId:
        type: integer
      tasks:
        type: array
        items:
          $ref: '#/definitions/TaskCreate'
  ReportUpdate:
    allOf:
      - $ref: '#/definitions/ReportCreate'
      - properties: 
          tasks:
            type: array
            items:
              $ref: '#/definitions/TaskUpdate'            
  ReportResponse:
    allOf:
      - $ref: '#/definitions/ReportCreate'   
      - properties: 
          tasks:
            type: array
            items:
              $ref: '#/definitions/TaskResponse'
    properties:
        id:
          type: integer
  TaskCreate:
    required:
        - hours
        - datePerformed
    properties:
      hours:
        type: integer
      description:
        type: string
      datePerformed:
        type: string     
  TaskUpdate:
    allOf:
      - $ref: '#/definitions/TaskCreate'
    properties: 
      id:
        type: integer        
  TaskResponse: 
    allOf:
      - $ref: '#/definitions/TaskUpdate'   
    properties: 
      reportId:
        type: integer
  ReportsResponse:
    type: array
    items:
      $ref: '#/definitions/ReportResponse'
  CustomerCreate:
    required:
      - name
      - emails
      - addressLine1
      - city
      - state
      - zipCode
    properties:
      name:
        type: string
      emails: 
        type: array
        items:
          type: string
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      state:
        type: string
      zipCode:
        type: string
  Customer:
    properties: 
      id: 
        type: integer
      name: 
        type: string
      address: 
        type: string
      city: 
        type: string
      state: 
        type: string
      email: 
        type: string
  CustomersResponse:
    type: array
    items:
      $ref: '#/definitions/Customer'   
  CustomerUpdate:
    properties:
      name:
        type: string
      email:
        type: string
      address:
        type: string
      city:
        type: string
      state:
        type: string    

